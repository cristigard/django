#user can log in if is validated first

1. add to models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    #add is_validated default to False
    is_validated = models.BooleanField(default=False)
2.add to forms.py
from django import forms
from django.core.exceptions import ValidationError
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import get_user_model

class CustomUserLoginForm(AuthenticationForm):

   #set custom label name
    username = UsernameField(label='Client ID', widget=forms.TextInput(attrs={"autofocus": True}))

    #set custom error messages
    error_messages = {
        "invalid_login": "Please enter a correct Client ID and Password. Note that both fields may be case-sensitive.",
        "inactive": "Inactive account. You will recive an email when your account will be activated.",}

    #check if a user have is_validated flag set to False and reject authentication with custom inactive message
    def confirm_login_allowed(self, user):
        """
        Controls whether the given User may log in. This is a policy setting,
        independent of end-user authentication. This default behavior is to
        allow login by active users, and reject login by inactive users.

        If the given user cannot log in, this method should raise a
        ``ValidationError``.

        If the given user may log in, this method should return None.
        """
        if not user.is_validated:
            raise ValidationError(
                self.error_messages["inactive"],
                code="inactive",
            )

    class Meta:
        model = get_user_model()
        fields = ['username', 'password']


