#custom password login authentication

1.insert code to app_name(accounts) models.py file:
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _
class CustomUser(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)

2.create a backend.py file and insert code:
from django.contrib.auth.backends import ModelBackend
from django.contrib.auth import get_user_model
UserModel = get_user_model()
#login user with email
class EmailBackend(ModelBackend):
    def authenticate(self, request, username=None, password=None, **kwargs):
        if username is None or password is None:
            return None
        try:
            user = UserModel.objects.get(email__iexact=username)
        except UserModel.DoesNotExist:
            # Run the default password hasher once to reduce the timing
            # difference between an existing and a nonexistent user (#20760).
            UserModel().set_password(password)
            return None
        else:
            if user.check_password(password) and self.user_can_authenticate(user):
                return user
        return None
        
3.insert code to app_name(accounts) forms.py file:
from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import (UserCreationForm, AuthenticationForm)
class CustomAuthenticationForm(AuthenticationForm):
    username = forms.EmailField(label = 'Email')
    error_messages = {
        'invalid_login': (
            "Please enter a correct Email and Password. Note that both "
            "fields may be case-sensitive."
        ),
    }
class CustomRegisterForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ['username','email','password1','password2']

4.insert code to settings.py file:
AUTH_USER_MODEL = 'accounts.CustomUser' # new
AUTHENTICATION_BACKENDS = ['accounts.backends.EmailBackend'] # new

5.insert code to app_name(accounts) views.py file:
from django.contrib.auth import views as auth_views
from django.views import generic
from django.urls import reverse_lazy

from .forms import LoginForm, RegisterForm

class LoginView(auth_views.LoginView):
    form_class = LoginForm
    template_name = 'accounts/login.html'

class RegisterView(generic.CreateView):
    form_class = RegisterForm
    template_name = 'accounts/register.html'
    success_url = reverse_lazy('login')




